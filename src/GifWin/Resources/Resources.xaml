<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:GifWin"
                    xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
                    xmlns:ermau="clr-namespace:ermau;assembly=AnimatedTextBoxBehavior"
                    xmlns:system="clr-namespace:System;assembly=mscorlib">

    <FontFamily x:Key="ContentControlThemeFontFamily">Segoe UI</FontFamily>
    <system:Double x:Key="ControlContentThemeFontSize">15</system:Double>
    <system:Double x:Key="ContentControlFontSize">15</system:Double>
    <FontFamily x:Key="SymbolThemeFontFamily">Segoe MDL2 Assets</FontFamily>
    <SolidColorBrush x:Key="SystemAccentBrush" Color="#FF0075DA" />
    <Color x:Key="SystemAccentColor">#FF0075DA</Color>
    <Thickness x:Key="ButtonBorderThemeThickness">2</Thickness>

    <Style TargetType="{x:Type TextBlock}">
        <Setter Property="Foreground" Value="{DynamicResource DefaultForegroundText}" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
    </Style>
	
    <Style TargetType="{x:Type TextBox}">
        <Setter Property="FontSize" Value="{StaticResource ControlContentThemeFontSize}" />
        <Setter Property="FontFamily" Value="{StaticResource ContentControlThemeFontFamily}" />
        <Setter Property="Foreground" Value="{DynamicResource DefaultForegroundText}" />
        <Setter Property="CaretBrush" Value="{DynamicResource DefaultForegroundText}" />
        <Setter Property="Background" Value="Transparent" />
    </Style>

    <Style TargetType="local:HintTextBox">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="local:HintTextBox">
                    <Grid>
                        <TextBox Name="hint" Text="{TemplateBinding Hint}" Foreground="{TemplateBinding HintForeground}" FontSize="{TemplateBinding FontSize}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" Visibility="{Binding ElementName=actual, Path=Text.IsEmpty, Converter={StaticResource BooleanToVisibilityConverter}}" />
                        <TextBox Name="actual" Text="{Binding Text,RelativeSource={RelativeSource TemplatedParent},UpdateSourceTrigger=PropertyChanged}" FontSize="{TemplateBinding FontSize}" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="Transparent" Foreground="{TemplateBinding Foreground}">
                            <i:Interaction.Behaviors>
                                <ermau:AnimatedTextBoxBehavior />
                            </i:Interaction.Behaviors>
                        </TextBox>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LargeEntry" TargetType="local:HintTextBox" BasedOn="{StaticResource {x:Type local:HintTextBox}}">
        <Setter Property="FontSize" Value="50" />
        <Setter Property="BorderBrush" Value="{DynamicResource AccentBrush}" />
        <Setter Property="BorderThickness" Value="0,0,0,1" />
        <Setter Property="HintForeground" Value="{DynamicResource HintForeground}" />
    </Style>

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

<Style TargetType="{x:Type Button}">
	<Setter Property="Background" Value="{DynamicResource SystemControlBackgroundBaseLowBrush}"/>
	<Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}"/>
	<Setter Property="BorderBrush" Value="{DynamicResource SystemControlBackgroundBaseLowBrush}"/>
	<Setter Property="BorderThickness" Value="{DynamicResource ButtonBorderThemeThickness}"/>
	<Setter Property="Padding" Value="8,4,8,4"/>
	<Setter Property="HorizontalAlignment" Value="Left"/>
	<Setter Property="VerticalAlignment" Value="Center"/>
	<Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}"/>
	<Setter Property="FontWeight" Value="Normal"/>
	<Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}"/>
	<Setter Property="Template">
		<Setter.Value>
			<ControlTemplate TargetType="{x:Type Button}">
				<Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
					<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
				</Border>
				<ControlTemplate.Triggers>
					<Trigger Property="IsDefaulted" Value="true">
						<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
					</Trigger>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}"/>
					</Trigger>
					<Trigger Property="IsPressed" Value="true">
						<Setter Property="Background" TargetName="border" Value="{DynamicResource SystemControlBackgroundBaseMediumLowBrush}"/>
					</Trigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Background" TargetName="border" Value="{DynamicResource SystemControlBackgroundBaseLowBrush}"/>
						<Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource SystemControlBackgroundBaseLowBrush}"/>
						<Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}"/>
					</Trigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
		</Setter.Value>
	</Setter>
</Style>
	
<system:Double x:Key="ComboBoxArrowThemeFontSize">21</system:Double>
<system:Double x:Key="ComboBoxThemeMinWidth">64</system:Double>
<system:Double x:Key="ComboBoxPopupThemeMinWidth">80</system:Double>
<system:Double x:Key="ComboBoxPopupThemeTouchMinWidth">240</system:Double>
<Thickness x:Key="ComboBoxBorderThemeThickness">2</Thickness>
<Thickness x:Key="ComboBoxDropdownBorderThickness">1</Thickness>
<Thickness x:Key="ComboBoxDropdownContentMargin">0,7,0,7</Thickness>
<Thickness x:Key="ComboBoxHeaderThemeMargin">0,0,0,8</Thickness>
<Thickness x:Key="ComboBoxPopupBorderThemeThickness">2</Thickness>
<Thickness x:Key="ComboBoxItemThemePadding">11,5,11,7</Thickness>
<Thickness x:Key="ComboBoxItemThemeTouchPadding">11,11,11,13</Thickness>

<Style x:Key="ComboBoxToggleButton" TargetType="{x:Type ToggleButton}">
	<Setter Property="OverridesDefaultStyle" Value="true"/>
	<Setter Property="IsTabStop" Value="false"/>
	<Setter Property="Focusable" Value="false"/>
	<Setter Property="ClickMode" Value="Press"/>
	<Setter Property="Template">
		<Setter.Value>
			<ControlTemplate TargetType="{x:Type ToggleButton}">
				<Border x:Name="templateRoot" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
					<Border x:Name="splitBorder" BorderBrush="Transparent" BorderThickness="1" HorizontalAlignment="Right" Margin="0" SnapsToDevicePixels="true" Width="32">
						<TextBlock x:Name="arrow" Text="&#xE0E5;" FontFamily="{DynamicResource SymbolThemeFontFamily}" FontSize="12" Foreground="{DynamicResource SystemControlForegroundBaseMediumHighBrush}" HorizontalAlignment="Right" IsHitTestVisible="False" Margin="0,0,10,0" VerticalAlignment="Center" />
					</Border>
				</Border>
				<ControlTemplate.Triggers>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="true"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Static.Editable.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Static.Editable.Border}"/>
						<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Static.Editable.Button.Background}"/>
						<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Static.Editable.Button.Border}"/>
					</MultiDataTrigger>
					<Trigger Property="IsMouseOver" Value="true">
						<Setter Property="Foreground" TargetName="arrow" Value="{DynamicResource ComboBox.MouseOver.Glyph}"/>
					</Trigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource SystemControlPageBackgroundAltMediumBrush}" />
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SystemControlHighlightBaseMediumBrush}" />
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.MouseOver.Editable.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.MouseOver.Editable.Border}"/>
						<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Background}"/>
						<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.MouseOver.Editable.Button.Border}"/>
					</MultiDataTrigger>
					<Trigger Property="IsPressed" Value="true">
						<!--<Setter Property="Foreground" TargetName="arrow" Value="{DynamicResource ComboBox.Pressed.Glyph}"/>-->
					</Trigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource SystemControlBackgroundListMediumBrush}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource SystemControlHighlightBaseMediumLowBrush}"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="true"/>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Pressed.Editable.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Pressed.Editable.Border}"/>
						<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Background}"/>
						<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Pressed.Editable.Button.Border}"/>
					</MultiDataTrigger>
					<Trigger Property="IsEnabled" Value="false">
						<Setter Property="Foreground" TargetName="arrow" Value="{DynamicResource ComboBox.Disabled.Glyph}"/>
					</Trigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="false"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Border}"/>
					</MultiDataTrigger>
					<MultiDataTrigger>
						<MultiDataTrigger.Conditions>
							<Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="false"/>
							<Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="true"/>
						</MultiDataTrigger.Conditions>
						<Setter Property="Background" TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Editable.Background}"/>
						<Setter Property="BorderBrush" TargetName="templateRoot" Value="{DynamicResource ComboBox.Disabled.Editable.Border}"/>
						<Setter Property="Background" TargetName="splitBorder" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Background}"/>
						<Setter Property="BorderBrush" TargetName="splitBorder" Value="{DynamicResource ComboBox.Disabled.Editable.Button.Border}"/>
					</MultiDataTrigger>
				</ControlTemplate.Triggers>
			</ControlTemplate>
		</Setter.Value>
	</Setter>
</Style>
<ControlTemplate x:Key="ComboBoxTemplate" TargetType="{x:Type ComboBox}">
	<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
		</Grid.ColumnDefinitions>
		<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Margin="1" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
			<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource SystemControlForegroundChromeHighBrush}" BorderThickness="1" Background="{DynamicResource SystemControlBackgroundChromeMediumLowBrush}">
				<ScrollViewer x:Name="DropDownScrollViewer">
					<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
						<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
							<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
						</Canvas>
						<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Grid>
				</ScrollViewer>
			</Border>
		</Popup>
		<ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
		<ContentPresenter x:Name="contentPresenter" ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}" ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}" Content="{TemplateBinding SelectionBoxItem}" ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" IsHitTestVisible="false" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
	</Grid>
	<ControlTemplate.Triggers>
		<Trigger Property="HasItems" Value="false">
			<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
		</Trigger>
		<MultiTrigger>
			<MultiTrigger.Conditions>
				<Condition Property="IsGrouping" Value="true"/>
				<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
			</MultiTrigger.Conditions>
			<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
		</MultiTrigger>
		<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
			<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
			<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
		</Trigger>
	</ControlTemplate.Triggers>
</ControlTemplate>
<SolidColorBrush x:Key="TextBox.Static.Background" Color="#FFFFFFFF"/>
<Style x:Key="ComboBoxEditableTextBox" TargetType="{x:Type TextBox}">
	<Setter Property="OverridesDefaultStyle" Value="true"/>
	<Setter Property="AllowDrop" Value="true"/>
	<Setter Property="MinWidth" Value="0"/>
	<Setter Property="MinHeight" Value="0"/>
	<Setter Property="FocusVisualStyle" Value="{x:Null}"/>
	<Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
	<Setter Property="Template">
		<Setter.Value>
			<ControlTemplate TargetType="{x:Type TextBox}">
				<ScrollViewer x:Name="PART_ContentHost" Background="Transparent" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"/>
			</ControlTemplate>
		</Setter.Value>
	</Setter>
</Style>
<ControlTemplate x:Key="ComboBoxEditableTemplate" TargetType="{x:Type ComboBox}">
	<Grid x:Name="templateRoot" SnapsToDevicePixels="true">
		<Grid.ColumnDefinitions>
			<ColumnDefinition Width="*"/>
			<ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
		</Grid.ColumnDefinitions>
		<Popup x:Name="PART_Popup" AllowsTransparency="true" Grid.ColumnSpan="2" IsOpen="{Binding IsDropDownOpen, RelativeSource={RelativeSource TemplatedParent}}" PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}" Placement="Bottom">
			<Border x:Name="dropDownBorder" BorderBrush="{DynamicResource {x:Static SystemColors.WindowFrameBrushKey}}" BorderThickness="1" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
				<ScrollViewer x:Name="DropDownScrollViewer">
					<Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
						<Canvas x:Name="canvas" HorizontalAlignment="Left" Height="0" VerticalAlignment="Top" Width="0">
							<Rectangle x:Name="opaqueRect" Fill="{Binding Background, ElementName=dropDownBorder}" Height="{Binding ActualHeight, ElementName=dropDownBorder}" Width="{Binding ActualWidth, ElementName=dropDownBorder}"/>
						</Canvas>
						<ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Contained" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
					</Grid>
				</ScrollViewer>
			</Border>
		</Popup>
		<ToggleButton x:Name="toggleButton" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.ColumnSpan="2" IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Style="{StaticResource ComboBoxToggleButton}"/>
		<Border x:Name="border" Background="{StaticResource TextBox.Static.Background}" Margin="{TemplateBinding BorderThickness}">
			<TextBox x:Name="PART_EditableTextBox" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}" Margin="{TemplateBinding Padding}" Style="{StaticResource ComboBoxEditableTextBox}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
		</Border>
	</Grid>
	<ControlTemplate.Triggers>
		<Trigger Property="IsEnabled" Value="false">
			<Setter Property="Opacity" TargetName="border" Value="0.56"/>
		</Trigger>
		<Trigger Property="IsKeyboardFocusWithin" Value="true">
			<Setter Property="Foreground" Value="Black"/>
		</Trigger>
		<Trigger Property="HasItems" Value="false">
			<Setter Property="Height" TargetName="dropDownBorder" Value="95"/>
		</Trigger>
		<MultiTrigger>
			<MultiTrigger.Conditions>
				<Condition Property="IsGrouping" Value="true"/>
				<Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="false"/>
			</MultiTrigger.Conditions>
			<Setter Property="ScrollViewer.CanContentScroll" Value="false"/>
		</MultiTrigger>
		<Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="false">
			<Setter Property="Canvas.Top" TargetName="opaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
			<Setter Property="Canvas.Left" TargetName="opaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
		</Trigger>
	</ControlTemplate.Triggers>
</ControlTemplate>
<Style TargetType="{x:Type ComboBox}">
	<Setter Property="FontSize" Value="{DynamicResource ContentControlFontSize}" />
	<Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
	<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
	<Setter Property="Background" Value="{DynamicResource SystemControlBackgroundAltMediumLowBrush}"/>
	<Setter Property="BorderBrush" Value="{DynamicResource SystemControlForegroundBaseMediumLowBrush}"/>
	<Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}"/>
	<Setter Property="BorderThickness" Value="{DynamicResource ComboBoxBorderThemeThickness}"/>
	<Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
	<Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
	<Setter Property="Padding" Value="12,5,0,7"/>
	<Setter Property="ScrollViewer.CanContentScroll" Value="true"/>
	<Setter Property="ScrollViewer.PanningMode" Value="Both"/>
	<Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
	<Setter Property="Template" Value="{StaticResource ComboBoxTemplate}"/>
	<Setter Property="VerticalContentAlignment" Value="Center" />
	<Setter Property="MinWidth" Value="{DynamicResource ComboBoxThemeMinWidth}" />
	<Style.Triggers>
		<Trigger Property="IsEditable" Value="true">
			<Setter Property="IsTabStop" Value="false"/>
			<Setter Property="Padding" Value="2"/>
			<Setter Property="Template" Value="{StaticResource ComboBoxEditableTemplate}"/>
		</Trigger>
	</Style.Triggers>
</Style>

    <Style TargetType="{x:Type ComboBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Foreground" Value="{DynamicResource SystemControlForegroundBaseHighBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="TextElement.Foreground" TargetName="Bd" Value="{DynamicResource SystemControlDisabledBaseMediumLowBrush}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="False"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SystemControlHighlightListLowBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SystemControlHighlightListAccentLowBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SystemControlHighlightListAccentMediumBrush}"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True"/>
                                <Condition Property="IsMouseOver" Value="False"/>
                                <Condition Property="IsKeyboardFocused" Value="False"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource SystemControlHighlightListAccentLowBrush}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>